// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name:"userId")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  multiUrlQrCodes   MultiURLCode[] @relation("multiURLCodes")
  dynamicURL       DynamicURL[] @relation("dynamicURL")
  dynamicMultiURL   DynamicMultiURL[] @relation("dynamicMultiURL")
  dynamicFreeText    DynamicFreeText[]  @relation("dynamicFreeText")
  dynamicContact    DynamicContact[]   @relation("dynamicContact")
  aiURLCode AiURLQRCode[] @relation("aiUrlCodes")
  multiUrlAiQr MulitUrlAiQr[] @relation("multiUrlAiQr")
  aiFreeTextQr AiFreeTextQr[] @relation("aiFreeTextQr")
  aiContactQr AiContactQr[] @relation("aiContactQr")
  qrCodeAnalytics QRCodeAnalytics[] @relation("qrCodeAnalytics")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QRCodeAnalytics {
  id String @id @default(uuid())
  scanCount Int @default(0)
  qrName String
  createdAt DateTime 
  lastScanAt DateTime?
  userId String
  aiUrlQrCode AiURLQRCode? @relation("aiUrlAnalytics")
  aiMultiUrlQrCode MulitUrlAiQr? @relation("aiMultiUrlAnalytics")
  aiFreetextQr AiFreeTextQr? @relation("aiFreetextAnalytics")
  aiContactQr AiContactQr? @relation("aiContactAnalytics")
  dynamicUrlQr DynamicURL? @relation("dynamicUrlAnalytics")
  dynamicMultiUrlQr DynamicMultiURL? @relation("dynamicMultiUrlAnalytics")
  dynamicFreetextQr DynamicFreeText? @relation("dynamicFreetextAnalytics")
  dynamicContactQr DynamicContact? @relation("dynamicContactAnalytics")
  user User @relation("qrCodeAnalytics", fields: [userId], references: [id]) //for fetching the top qr codes
  
}


model MultiURLCode {
  id  String @id @default(cuid())
  qrCode String @db.VarChar(3000)
  urls String[]
  titles String[]
  userId String
  user User @relation("multiURLCodes",fields:[userId], references:[id])
}

model DynamicURL {
  id String @id @default(cuid())
  url String @db.VarChar(500)
  uniqueToken String @unique
  qrCode String @db.VarChar(3000)
  name String 
  userId String
  qrCodeAnalyticsId String @unique
  user User @relation("dynamicURL",fields: [userId], references: [id])
  qrCodeAnalytics QRCodeAnalytics @relation("dynamicUrlAnalytics",fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
}

model DynamicMultiURL {
  id String @id @default(cuid())
  urls String[]
  titles String[]
  uniqueToken String @unique
  name String
  qrCode String @db.VarChar(3000)
  userId String
  qrCodeAnalyticsId String @unique
  user User @relation("dynamicMultiURL", fields: [userId], references: [id])
  qrCodeAnalytics QRCodeAnalytics @relation("dynamicMultiUrlAnalytics",fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
}

model DynamicFreeText {
  id String @id @default(cuid())
  name String
  freetext String @db.VarChar(5000)
  qrCode String @db.VarChar(3000)
  uniqueToken String @unique
  userId String
  qrCodeAnalyticsId String @unique
  user User @relation("dynamicFreeText", fields: [userId], references: [id])
  qrCodeAnalytics QRCodeAnalytics @relation("dynamicFreetextAnalytics",fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
}

model DynamicContact {
  id String @id @default(cuid())
  firstName String
  lastName String
  organisation String
  email String
  phoneNumber String
  qrCode String @db.VarChar(3000)
  uniqueToken String @unique
  userId String
  qrCodeAnalyticsId String @unique
  user User @relation("dynamicContact",fields: [userId], references: [id])
  qrCodeAnalytics QRCodeAnalytics @relation("dynamicContactAnalytics", fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
}

model AiURLQRCode {
  id String @id @default(cuid())
  url String @db.VarChar(500)
  uniqueToken String @unique
  image_url String
  name String
  userId String
  qrCodeAnalyticsId String @unique
  user User @relation("aiUrlCodes",fields: [userId], references: [id])
  qrCodeAnalytics QRCodeAnalytics @relation("aiUrlAnalytics",fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)

}

model MulitUrlAiQr {
  id String @id @default(cuid())
  urls String[]
  titles String[]
  uniqueToken String @unique
  name String
  image_url String
  userId String
  qrCodeAnalyticsId String @unique
  user User @relation("multiUrlAiQr",fields: [userId], references: [id])
  qrCodeAnalytics QRCodeAnalytics @relation("aiMultiUrlAnalytics",fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
}

model AiFreeTextQr {
  id String @id @default(cuid())
  name String
  freetext String @db.VarChar(3000)
  image_url String
  uniqueToken String @unique
  userId String
  qrCodeAnalyticsId String @unique
  user User @relation("aiFreeTextQr", fields: [userId], references: [id])
  qrCodeAnalytics QRCodeAnalytics @relation("aiFreetextAnalytics", fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
}

model AiContactQr {
  id String @id @default(cuid())
  first_name String
  last_name String
  organisation String
  email String
  phone_number String
  image_url String
  uniqueToken String @unique
  userId String
  qrCodeAnalyticsId String @unique
  user User @relation("aiContactQr", fields: [userId], references: [id])
  qrCodeAnalytics QRCodeAnalytics @relation("aiContactAnalytics", fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)

}

model ProSubscription {
  id String @id @default(cuid())
  userId String @unique
  stripeCustomerId String @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String? @unique @map(name:"stripe_subscription_id")
  stripePriceId String? @map(name:"stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name:"stripe_current_period_end")  
}

model PlusSubscription {
  id String @id @default(cuid())
  userId String @unique
  stripeCustomerId String @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String? @unique @map(name:"stripe_subscription_id")
  stripePriceId String? @map(name:"stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name:"stripe_current_period_end") 
}

model AnonymousUser {
  id String @id @default(cuid())
  browserFingerprint String @unique
  numQrCodes Int @default(0)
  lastGeneratedAt DateTime @default(now())
  anonymousURLQrCodes AnonymousURLQrCode[]
}

model AnonymousURLQrCode {
  id String @id @default(cuid())
  url String @db.VarChar(500)
  anonymousUserId String
  image_url String
  name String
  uniqueToken String @unique
  anonymousUser AnonymousUser @relation(fields: [anonymousUserId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
