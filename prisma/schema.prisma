// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name:"userId")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  multiUrlQrCodes   MultiURLCode[] @relation("multiURLCodes")
  dynamicURL       DynamicURL[] @relation("dynamicURL")
  dynamicMultiURL   DynamicMultiURL[] @relation("dynamicMultiURL")
  dynamicFreeText    DynamicFreeText[]  @relation("dynamicFreeText")
  dynamicContact    DynamicContact[]   @relation("dynamicContact")
  aiURLCode AiURLQRCode[] @relation("aiUrlCodes")
}


model MultiURLCode {
  id  String @id @default(cuid())
  qrCode String @db.VarChar(3000)
  urls String[]
  titles String[]
  userId String
  user User @relation("multiURLCodes",fields:[userId], references:[id])
}

model DynamicURL {
  id String @id @default(cuid())
  url String @db.VarChar(500)
  uniqueToken String @unique
  qrCode String @db.VarChar(3000)
  name String 
  userId String
  user User @relation("dynamicURL",fields: [userId], references: [id])
}

model DynamicMultiURL {
  id String @id @default(cuid())
  urls String[]
  titles String[]
  uniqueToken String @unique
  name String
  qrCode String @db.VarChar(3000)
  userId String
  user User @relation("dynamicMultiURL", fields: [userId], references: [id])
}

model DynamicFreeText {
  id String @id @default(cuid())
  name String
  freetext String @db.VarChar(5000)
  qrCode String @db.VarChar(3000)
  uniqueToken String @unique
  userId String
  user User @relation("dynamicFreeText", fields: [userId], references: [id])
}

model DynamicContact {
  id String @id @default(cuid())
  firstName String
  lastName String
  organisation String
  email String
  phoneNumber String
  qrCode String @db.VarChar(3000)
  uniqueToken String @unique
  userId String
  user User @relation("dynamicContact",fields: [userId], references: [id])
}

model AiURLQRCode {
  id String @id @default(cuid())
  url String @db.VarChar(500)
  uniqueToken String @unique
  image_url String
  userId String
  user User @relation("aiUrlCodes",fields: [userId], references: [id])

}