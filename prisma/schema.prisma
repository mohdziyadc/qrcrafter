generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "userId")
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  aiContactQr     AiContactQr[]     @relation("aiContactQr")
  aiFreeTextQr    AiFreeTextQr[]    @relation("aiFreeTextQr")
  aiURLCode       AiURLQRCode[]     @relation("aiUrlCodes")
  dynamicContact  DynamicContact[]  @relation("dynamicContact")
  dynamicFreeText DynamicFreeText[] @relation("dynamicFreeText")
  dynamicMultiURL DynamicMultiURL[] @relation("dynamicMultiURL")
  dynamicURL      DynamicURL[]      @relation("dynamicURL")
  multiUrlAiQr    MulitUrlAiQr[]    @relation("multiUrlAiQr")
  multiUrlQrCodes MultiURLCode[]    @relation("multiURLCodes")
  qrCodeAnalytics QRCodeAnalytics[] @relation("qrCodeAnalytics")
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QRCodeAnalytics {
  id                String           @id @default(uuid())
  scanCount         Int              @default(0)
  createdAt         DateTime
  lastScanAt        DateTime?
  userId            String
  qrName            String
  aiContactQr       AiContactQr?     @relation("aiContactAnalytics")
  aiFreetextQr      AiFreeTextQr?    @relation("aiFreetextAnalytics")
  aiUrlQrCode       AiURLQRCode?     @relation("aiUrlAnalytics")
  dynamicContactQr  DynamicContact?  @relation("dynamicContactAnalytics")
  dynamicFreetextQr DynamicFreeText? @relation("dynamicFreetextAnalytics")
  dynamicMultiUrlQr DynamicMultiURL? @relation("dynamicMultiUrlAnalytics")
  dynamicUrlQr      DynamicURL?      @relation("dynamicUrlAnalytics")
  aiMultiUrlQrCode  MulitUrlAiQr?    @relation("aiMultiUrlAnalytics")
  user              User             @relation("qrCodeAnalytics", fields: [userId], references: [id])
}

model MultiURLCode {
  id     String   @id @default(cuid())
  qrCode String   @db.VarChar(3000)
  urls   String[]
  titles String[]
  userId String
  user   User     @relation("multiURLCodes", fields: [userId], references: [id])
}

model DynamicURL {
  id                String          @id @default(cuid())
  url               String          @db.VarChar(500)
  uniqueToken       String          @unique
  qrCode            String          @db.VarChar(3000)
  name              String
  userId            String
  qrCodeAnalyticsId String          @unique
  qrCodeAnalytics   QRCodeAnalytics @relation("dynamicUrlAnalytics", fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
  user              User            @relation("dynamicURL", fields: [userId], references: [id])
}

model DynamicMultiURL {
  id                String          @id @default(cuid())
  urls              String[]
  titles            String[]
  uniqueToken       String          @unique
  name              String
  qrCode            String          @db.VarChar(3000)
  userId            String
  qrCodeAnalyticsId String          @unique
  qrCodeAnalytics   QRCodeAnalytics @relation("dynamicMultiUrlAnalytics", fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
  user              User            @relation("dynamicMultiURL", fields: [userId], references: [id])
}

model DynamicFreeText {
  id                String          @id @default(cuid())
  name              String
  freetext          String          @db.VarChar(5000)
  qrCode            String          @db.VarChar(3000)
  uniqueToken       String          @unique
  userId            String
  qrCodeAnalyticsId String          @unique
  qrCodeAnalytics   QRCodeAnalytics @relation("dynamicFreetextAnalytics", fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
  user              User            @relation("dynamicFreeText", fields: [userId], references: [id])
}

model DynamicContact {
  id                String          @id @default(cuid())
  firstName         String
  lastName          String
  organisation      String
  email             String
  phoneNumber       String
  qrCode            String          @db.VarChar(3000)
  uniqueToken       String          @unique
  userId            String
  qrCodeAnalyticsId String          @unique
  qrCodeAnalytics   QRCodeAnalytics @relation("dynamicContactAnalytics", fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
  user              User            @relation("dynamicContact", fields: [userId], references: [id])
}

model AiURLQRCode {
  id                String          @id @default(cuid())
  url               String          @db.VarChar(500)
  uniqueToken       String          @unique
  image_url         String
  name              String
  userId            String
  qrCodeAnalyticsId String          @unique
  qrCodeAnalytics   QRCodeAnalytics @relation("aiUrlAnalytics", fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
  user              User            @relation("aiUrlCodes", fields: [userId], references: [id])
}

model MulitUrlAiQr {
  id                String          @id @default(cuid())
  urls              String[]
  titles            String[]
  uniqueToken       String          @unique
  name              String
  image_url         String
  userId            String
  qrCodeAnalyticsId String          @unique
  qrCodeAnalytics   QRCodeAnalytics @relation("aiMultiUrlAnalytics", fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
  user              User            @relation("multiUrlAiQr", fields: [userId], references: [id])
}

model AiFreeTextQr {
  id                String          @id @default(cuid())
  name              String
  freetext          String          @db.VarChar(3000)
  image_url         String
  uniqueToken       String          @unique
  userId            String
  qrCodeAnalyticsId String          @unique
  qrCodeAnalytics   QRCodeAnalytics @relation("aiFreetextAnalytics", fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
  user              User            @relation("aiFreeTextQr", fields: [userId], references: [id])
}

model AiContactQr {
  id                String          @id @default(cuid())
  first_name        String
  last_name         String
  organisation      String
  email             String
  phone_number      String
  image_url         String
  uniqueToken       String          @unique
  userId            String
  qrCodeAnalyticsId String          @unique
  qrCodeAnalytics   QRCodeAnalytics @relation("aiContactAnalytics", fields: [qrCodeAnalyticsId], references: [id], onDelete: Cascade)
  user              User            @relation("aiContactQr", fields: [userId], references: [id])
}

model ProSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

model PlusSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

model AnonymousUser {
  id                       String                @id @default(cuid())
  browserFingerprint       String                @unique
  numQrCodes               Int                   @default(0)
  lastGeneratedAt          DateTime              @default(now())
  anonymousContactQrCodes  AnonymousContactQr[]
  anonymousFreetextQrCodes AnonymousFreetextQr[]
  anonymousMultiUrlQrCodes AnonymousMultiUrlQr[]
  anonymousURLQrCodes      AnonymousURLQr[]
}

model AnonymousURLQr {
  id              String        @id @default(cuid())
  url             String        @db.VarChar(500)
  anonymousUserId String
  image_url       String
  name            String
  country String
  uniqueToken     String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  anonymousUser   AnonymousUser @relation(fields: [anonymousUserId], references: [id])
}

model AnonymousMultiUrlQr {
  id              String        @id @default(cuid())
  urls            String[]
  titles          String[]
  name            String
  image_url       String
  uniqueToke      String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  anonymousUserId String
  anonymousUser   AnonymousUser @relation(fields: [anonymousUserId], references: [id])
}

model AnonymousContactQr {
  id              String        @id @default(cuid())
  name            String
  first_name      String
  last_name       String
  organisation    String
  email           String
  phone_number    String
  image_url       String
  uniqueToken     String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  anonymousUserId String
  anonymousUser   AnonymousUser @relation(fields: [anonymousUserId], references: [id])
}

model AnonymousFreetextQr {
  id              String        @id @default(cuid())
  name            String
  image_url       String
  free_text       String[]      @db.VarChar(5000)
  uniqueToken     String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  anonymousUserId String
  anonymousUser   AnonymousUser @relation(fields: [anonymousUserId], references: [id])
}
